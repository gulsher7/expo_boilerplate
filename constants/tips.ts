export const REACT_NATIVE_TIPS = [
  { title: "Use Functional Components", description: "Prefer functional components with hooks for better performance and readability." },
  { title: "Avoid Anonymous Functions in JSX", description: "Define functions outside JSX to prevent unnecessary re-renders." },
  { title: "Use PureComponent or Memo", description: "Optimize re-renders by using React.memo or extending PureComponent for class components." },
  { title: "Split Large Components", description: "Break down large components into smaller, reusable ones for better maintainability." },
  { title: "Use PropTypes or TypeScript", description: "Define prop types to enforce type safety and improve code quality." },
  { title: "Avoid Using `any` in TypeScript", description: "Always provide specific types to enhance code maintainability and avoid runtime errors." },
  { title: "Use `useCallback` and `useMemo`", description: "Optimize functions and values that don’t need to change on each render." },
  { title: "Use a Consistent Folder Structure", description: "Organize your project with a clear structure for better scalability." },
  { title: "Use FlatList for Large Lists", description: "Avoid ScrollView for long lists to optimize memory usage." },
  { title: "Enable Recyclerview on Android", description: "Use legacyImplementation={false} in FlatList for better list performance." },
  { title: "Use `shouldComponentUpdate` or `React.memo`", description: "Prevent unnecessary re-renders in components." },
  { title: "Avoid Re-rendering Unnecessary Components", description: "Use key-based optimizations and conditional rendering." },
  { title: "Use `InteractionManager.runAfterInteractions`", description: "Defer heavy computations until after animations and interactions complete." },
  { title: "Batch State Updates", description: "Use functional updates (setState(prevState => {...})) to optimize state updates." },
  { title: "Debounce Expensive Operations", description: "Use libraries like lodash.debounce for expensive computations." },
  { title: "Lazy Load Components", description: "Use React.lazy() and Suspense to load components only when needed." },
  { title: "Use `removeClippedSubviews` for Lists", description: "Improve performance by unmounting off-screen items in FlatList." },
  { title: "Optimize Gesture Handling", description: "Use react-native-gesture-handler for better touch responsiveness." },
  { title: "Use Redux or Context API", description: "Manage global state efficiently using Redux Toolkit or React Context API." },
  { title: "Persist Data with AsyncStorage", description: "Use @react-native-async-storage/async-storage to store user preferences." },
  { title: "Use Redux Persist", description: "Automatically rehydrate Redux state on app restart." },
  { title: "Use Zustand or Recoil for Lightweight State Management", description: "When Redux is overkill, use these alternatives." },
  { title: "Use React Navigation", description: "For screen transitions and deep linking support." },
  { title: "Use Stack, Bottom Tabs, and Drawer Navigator Properly", description: "Structure navigation to improve UX." },
  { title: "Optimize Navigation Performance", description: "Enable lazy loading and avoid unnecessary screen re-renders." },
  { title: "Use Deep Linking", description: "Implement deep linking to enable app access via URLs." },
  { title: "Handle Back Press Correctly", description: "Use BackHandler API to manage Android hardware back button behavior." },
  { title: "Use StyleSheet.create()", description: "Prevent inline style recreation and optimize performance." },
  { title: "Use Theme Providers", description: "Implement light/dark themes using react-native-paper or styled-components." },
  { title: "Use `react-native-fast-image` for Images", description: "Improve image loading performance." },
  { title: "Optimize SVGs with `react-native-svg`", description: "Avoid performance issues with vector graphics." },
  { title: "Use `react-native-reanimated` for Animations", description: "Create smooth animations without blocking the main thread." },
  { title: "Use `react-native-linear-gradient` for Gradients", description: "Avoid using images for gradient effects." },
  { title: "Avoid Shadow Performance Issues on Android", description: "Use elevation instead of shadow properties for Android." },
  { title: "Use `KeyboardAvoidingView`", description: "Prevent input fields from being hidden by the keyboard." },
  { title: "Use `useWindowDimensions` Instead of `Dimensions.get()`", description: "To handle orientation changes dynamically." },
  { title: "Use Axios Instead of Fetch", description: "Axios provides better error handling and interceptors." },
  { title: "Implement API Caching", description: "Cache API responses using libraries like react-query." },
  { title: "Use AbortController to Cancel API Calls", description: "Prevent memory leaks from unmounted components." },
  { title: "Debounce API Requests", description: "Reduce redundant API calls using lodash.debounce." },
  { title: "Use WebSockets for Real-time Data", description: "Implement WebSockets for chat and real-time updates." },
  { title: "Use Reactotron", description: "Debug network requests, Redux state, and performance issues." },
  { title: "Enable Remote Debugging", description: "Use Chrome Developer Tools for debugging React Native apps." },
  { title: "Use Flipper for Debugging", description: "Debug logs, network, layout, and performance in one tool." },
  { title: "Monitor Performance with `useFlipper`", description: "Track frame rates and memory usage." },
  { title: "Use Console Logging Wisely", description: "Remove unnecessary console.log() statements in production." },
  { title: "Test on Real Devices", description: "Emulators don’t fully replicate real-world performance." },
  { title: "Secure AsyncStorage Data", description: "Use encryption libraries like react-native-keychain." },
  { title: "Optimize App Size", description: "Use Proguard for Android and Bitcode stripping for iOS." },
  { title: "Enable Hermes on Android", description: "Improve performance with a lightweight JavaScript engine." }
];
